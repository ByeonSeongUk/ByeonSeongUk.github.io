{"meta":{"title":"Github blog","subtitle":"conding note","description":"","author":"Seong Uk","url":"https://github.com/ByeonSeongUk/ByeonSeongUk.github.io","root":"/"},"pages":[{"title":"about","date":"2022-11-23T04:56:13.000Z","updated":"2022-11-23T04:56:13.420Z","comments":true,"path":"about/index.html","permalink":"https://github.com/ByeonSeongUk/ByeonSeongUk.github.io/about/index.html","excerpt":"","text":""},{"title":"tags","date":"2022-11-22T08:28:47.000Z","updated":"2022-11-22T08:28:47.025Z","comments":true,"path":"tags/index.html","permalink":"https://github.com/ByeonSeongUk/ByeonSeongUk.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Redux 란?","slug":"Redux-란","date":"2022-11-25T12:32:00.000Z","updated":"2022-11-25T00:49:34.799Z","comments":true,"path":"2022/11/25/Redux-란/","link":"","permalink":"https://github.com/ByeonSeongUk/ByeonSeongUk.github.io/2022/11/25/Redux-%EB%9E%80/","excerpt":"","text":"💡 리액트에서 레이아웃 만들 때 쓰는 문법 원래 React &lt;div&gt;를 만드는 방법test.html1React.createElement(&#x27;div&#x27;, null, &#x27;Hello World&#x27;) JSX 로 &lt;div&gt;를 만드는 방법test.html1&lt;div&gt;Hello World&lt;/div&gt; JSX 문법1. class 적용 방법12345// HTML&lt;div class=&quot;App&quot;&gt;&lt;/div&gt;// React은 다르다&lt;div className=&quot;App&quot;&gt;&lt;/div 2. 중괄호 문법 (변수를 HTML에 넣는 방법) 데이터 바인딩이라고 한다. 서버랑 통신할때 많이 사용 서버에서 받아온 값을 변수로 선언해 담아두고 바로 HTML으로 출력하게함 id, clssName, src 등의 항목에도 중괄호 문법 사용 가능 123456789101112131415161718function App() &#123; let post = &#x27;강남 초밥 맛집&#x27;; // 원래 js에서의 변수를 넣는 사용법 (React에선 중괄호 문법으로 대체) document.querySelector(&#x27;h4&#x27;).innerHTML = post; return ( &lt;div className=&quot;App&quot;&gt; &lt;div className=&quot;black-nav&quot;&gt; &lt;h4&gt;블로그임&lt;/h4&gt; &lt;/div&gt; &#123;/* 중괄호 문법 사용 */&#125; &lt;h4&gt;&#123;post&#125;&lt;/h4&gt; &lt;/div&gt; );&#125; 3. JSX의 style 적용 방법 💡 일반 HTML Style 적용 방법과 다르다! 카멜 케이스 형태로 넣어줘야 한다. 카멜 케이스 형태를 지켜야 한다. → font-size** X, fontSize O 오브젝트 형태로 넣어줘야 한다. → 속성명 : ‘속성값’ 123456789function App() &#123; let post = &#x27;강남 초밥 맛집&#x27;; &lt;div className=&quot;App&quot;&gt; &#123;/* React의 style 속성 사용 */&#125; &lt;h4 style=&#123; &#123;color:&#x27;red&#x27;, fontSize:&#x27;16px&#x27;&#125; &#125;&gt;&#123;post&#125;&lt;/h4&gt; &lt;/div&gt;&#125;","categories":[{"name":"React","slug":"React","permalink":"https://github.com/ByeonSeongUk/ByeonSeongUk.github.io/categories/React/"},{"name":"Redux","slug":"React/Redux","permalink":"https://github.com/ByeonSeongUk/ByeonSeongUk.github.io/categories/React/Redux/"}],"tags":[]},{"title":"함께자라기 post 테스트","slug":"함께자라기-post-테스트","date":"2022-11-24T00:32:00.000Z","updated":"2022-11-25T00:49:46.483Z","comments":true,"path":"2022/11/24/함께자라기-post-테스트/","link":"","permalink":"https://github.com/ByeonSeongUk/ByeonSeongUk.github.io/2022/11/24/%ED%95%A8%EA%BB%98%EC%9E%90%EB%9D%BC%EA%B8%B0-post-%ED%85%8C%EC%8A%A4%ED%8A%B8/","excerpt":"","text":"","categories":[{"name":"Book","slug":"Book","permalink":"https://github.com/ByeonSeongUk/ByeonSeongUk.github.io/categories/Book/"},{"name":"함께자라기","slug":"Book/함께자라기","permalink":"https://github.com/ByeonSeongUk/ByeonSeongUk.github.io/categories/Book/%ED%95%A8%EA%BB%98%EC%9E%90%EB%9D%BC%EA%B8%B0/"}],"tags":[]},{"title":"JSX 문법","slug":"State","date":"2022-11-23T12:32:00.000Z","updated":"2022-11-30T00:24:17.631Z","comments":true,"path":"2022/11/23/State/","link":"","permalink":"https://github.com/ByeonSeongUk/ByeonSeongUk.github.io/2022/11/23/State/","excerpt":"","text":"💡 주의사항 Return안에는 병렬로 태그 사용 금지 1234567return ( // 아래처럼 사용 불가 &lt;div className=&quot;App&quot;&gt; &lt;/div&gt; &lt;div&gt; &lt;/div&gt;); React에서 자료를 잠깐 보관할 때의 방법 → useState()사용 1234// 기본 사용 방법function App() &#123; let[a, b] = useState(&#x27;남자 코트 추천&#x27;)&#125; a : state에 보관한 자료 b : state 변경을 도와주는 함수 위 문법은 JavaScript의 Destructuring 문법이다. 12// 배열로도 사용 가능 (꺼낼땐 인덱싱)let [글제목, a] = useState([&#x27;남자 코트 추천&#x27;, &#x27;여자 코트 추천&#x27;, &#x27;아이 코트 추천&#x27;]); Destructuring 문법 Array 12345678// 일반적으로 배열을 사용시let num = [1, 2];let a = num[0];let c = num[1];// Destructuring 문법 사용시 -&gt; 간단해진다.let [a, c] = [1, 2]; 변수와 useState()의 차이점 데이터의 변경시 변수에 담아두면 바로 반영을 안해줌 useState() 의 사용시 데이터의 변경이 일어날때 자동으로 재랜더링 된다. 💡 상황에 맞게 변수와 State를 잘 맞춰 사용해야 한다! 자주 변경될 것 같은 html 부분은 **state 를 사용** 자주 변경이 되지 않을때 **변수** 를 사용 💡 **ERROR** 와 **WARING** 메시지 ERROR 는 고쳐야 하는 메시지 WARING 은 경고 → 굳이 안고쳐도 되는 메시지 1234/* eslint-disable */ -&gt; 이 페이지 전체를 WARING 안뜨게 무시import logo from &#x27;./logo.svg&#x27;;import &#x27;./App.css&#x27;;import &#123; useState &#125; from &#x27;react&#x27;; State의 변경 방법잘못된 예시 등호로 변경하면 변경이 안된다. 12// 잘못된 사용 예시&lt;span onClick=&#123;()=&gt; &#123; likey = likey + 1 &#125;&#125;&gt; 👍 &lt;/span&gt; 올바른 예시 변경함수 사용으로 꼭! 변경 해줘야 한다. 1234567891011121314// state 사용시 a는 변수, b는 변경함수라고 설명함let [a, b] = useState(0);// 즉, likey가 좋아요 갸수, likeyCount를 이용해 버튼 클릭시 +1 을 해주는 함수를 만든다.let [likey, likeyCount] = useState(0);return ( &lt;div className=&quot;App&quot;&gt; &lt;h4&gt;&#123; 글제목[0] &#125; &lt;span onClick=&#123;() =&gt; &#123;likeyCount(likey++)&#125;&#125;&gt;👍&lt;/span&gt; &#123;likey&#125; &lt;/h4&gt; &lt;/div&gt;); state 의 Array, Object 형 변경 방법1let [title, titleChange] = useState([&#x27;남자 코트 추천&#x27;, &#x27;여자 코트 추천&#x27;, &#x27;아이 코트 추천&#x27;]); 잘못된 예시 12// !!! 이렇게 사용시 useSate(&#x27;여자 코트 추천&#x27;); 이런식으로 변경이 되어버림.&lt;button onClick=&#123;() =&gt; &#123;titleChange(title[0]=&#x27;여자 코트 추천&#x27;)&#125;&#125;&gt;BTN&lt;/button&gt; 올바른 예시 1234567// Array와 Object를 다룰 땐 원본은 보존하는게 좋다!// 카피 문법&lt;button onClick=&#123;() =&gt; &#123; let copy = [...title]; // ... 을 사용 하는 이유는 아래에서 설명 copy[0] = &#x27;여자 코트 추천&#x27;; titleChange(copy) &#125;&#125;&gt;글수정&lt;/button&gt; state 변경 함수 특징 기존 state, 신규 state를 변경할때 조건을 따진다. 기존 state, 신규 state를 비교해 똑같으면 변경을 하지 않음(자원 절약을 위해) → 기존 state == 신규 state 가 true면 데이터 변경 X Array, Object의 특징은 배열의 데이터가 아닌 배열이 저장된 곳을 가르키는 화살표가 저장이 된다. 그러므로 copyArray[0] = ‘데이터’; 이런식으로 데이터를 변경하려고 해도 가르키는 화살표는 변경이 안되어서 state 변경 함수의 조건에 걸리기 때문에 변경이 안되는 것이다. […title] 를 사용하면 …은 title에 있는 [] 괄호를 벗겨주세요~ 라는 문법이다. → Shallow copy 문법이라고 한다. 12345// 잘못된 예시let copy = title; // 배열이 저장된 위치를 가르키는 화살표가 저장 된다.// 올바른 예시let copy = [...title] // 배열을 가져와 데이터 자체를 복사한다. 💡State에 저장된 Array &#x2F; Object 변경시 Shallow copy를 만들어서 수정해야 한다!","categories":[{"name":"React","slug":"React","permalink":"https://github.com/ByeonSeongUk/ByeonSeongUk.github.io/categories/React/"}],"tags":[]},{"title":"JSX 문법","slug":"JSX-문법","date":"2022-11-23T12:32:00.000Z","updated":"2022-11-24T08:48:43.475Z","comments":true,"path":"2022/11/23/JSX-문법/","link":"","permalink":"https://github.com/ByeonSeongUk/ByeonSeongUk.github.io/2022/11/23/JSX-%EB%AC%B8%EB%B2%95/","excerpt":"","text":"💡 리액트에서 레이아웃 만들 때 쓰는 문법 원래 React &lt;div&gt;를 만드는 방법test.html1React.createElement(&#x27;div&#x27;, null, &#x27;Hello World&#x27;) JSX 로 &lt;div&gt;를 만드는 방법test.html1&lt;div&gt;Hello World&lt;/div&gt; JSX 문법1. class 적용 방법12345// HTML&lt;div class=&quot;App&quot;&gt;&lt;/div&gt;// React은 다르다&lt;div className=&quot;App&quot;&gt;&lt;/div 2. 중괄호 문법 (변수를 HTML에 넣는 방법) 데이터 바인딩이라고 한다. 서버랑 통신할때 많이 사용 서버에서 받아온 값을 변수로 선언해 담아두고 바로 HTML으로 출력하게함 id, clssName, src 등의 항목에도 중괄호 문법 사용 가능 123456789101112131415161718function App() &#123; let post = &#x27;강남 초밥 맛집&#x27;; // 원래 js에서의 변수를 넣는 사용법 (React에선 중괄호 문법으로 대체) document.querySelector(&#x27;h4&#x27;).innerHTML = post; return ( &lt;div className=&quot;App&quot;&gt; &lt;div className=&quot;black-nav&quot;&gt; &lt;h4&gt;블로그임&lt;/h4&gt; &lt;/div&gt; &#123;/* 중괄호 문법 사용 */&#125; &lt;h4&gt;&#123;post&#125;&lt;/h4&gt; &lt;/div&gt; );&#125; 3. JSX의 style 적용 방법 💡 일반 HTML Style 적용 방법과 다르다! 카멜 케이스 형태로 넣어줘야 한다. 카멜 케이스 형태를 지켜야 한다. → font-size** X, fontSize O 오브젝트 형태로 넣어줘야 한다. → 속성명 : ‘속성값’ 123456789function App() &#123; let post = &#x27;강남 초밥 맛집&#x27;; &lt;div className=&quot;App&quot;&gt; &#123;/* React의 style 속성 사용 */&#125; &lt;h4 style=&#123; &#123;color:&#x27;red&#x27;, fontSize:&#x27;16px&#x27;&#125; &#125;&gt;&#123;post&#125;&lt;/h4&gt; &lt;/div&gt;&#125;","categories":[{"name":"React","slug":"React","permalink":"https://github.com/ByeonSeongUk/ByeonSeongUk.github.io/categories/React/"}],"tags":[]},{"title":"개발 환경 세팅","slug":"개발-환경-세팅","date":"2022-11-22T11:28:22.000Z","updated":"2022-11-24T08:49:21.144Z","comments":true,"path":"2022/11/22/개발-환경-세팅/","link":"","permalink":"https://github.com/ByeonSeongUk/ByeonSeongUk.github.io/2022/11/22/%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD-%EC%84%B8%ED%8C%85/","excerpt":"","text":"React Project 생성 Windows → Power Shell Mac → Terminal 1npx create-react-app [프로젝트명] Create React App 으로 생성[링크] 기본 프로젝트 설명 폴더명 설명 node_modules 라이브러리 모음 public static 파일 모아두는곳 (이미지 등) src 소스코드 보관함 (App.js가 index) package.json 프로젝트 정보가 들어있다(라이브러리 등) 💡 웹 페이지는 HTML로 이루어져야 하는데 React는 .JS로 이루어져 있다. App.js에 함수 안에 있는 HTML들을 index.html로 변환해 웹 페이지를 띄워달라고 요청하는 파일이 있다. → 그 파일이 index.js파일이다. 서버 실행 방법 해당 프로젝트의 Root에서 Terminal을 연 후 아래 코드 실행 1npm start","categories":[{"name":"React","slug":"React","permalink":"https://github.com/ByeonSeongUk/ByeonSeongUk.github.io/categories/React/"}],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2022-11-22T06:09:25.109Z","updated":"2022-11-22T06:09:25.109Z","comments":true,"path":"2022/11/22/hello-world/","link":"","permalink":"https://github.com/ByeonSeongUk/ByeonSeongUk.github.io/2022/11/22/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"Https post 테스트","slug":"https-post-테스트","date":"2022-11-21T12:52:46.000Z","updated":"2022-11-24T04:01:52.345Z","comments":true,"path":"2022/11/21/https-post-테스트/","link":"","permalink":"https://github.com/ByeonSeongUk/ByeonSeongUk.github.io/2022/11/21/https-post-%ED%85%8C%EC%8A%A4%ED%8A%B8/","excerpt":"","text":"","categories":[{"name":"Book","slug":"Book","permalink":"https://github.com/ByeonSeongUk/ByeonSeongUk.github.io/categories/Book/"},{"name":"Https","slug":"Book/Https","permalink":"https://github.com/ByeonSeongUk/ByeonSeongUk.github.io/categories/Book/Https/"}],"tags":[]}],"categories":[{"name":"React","slug":"React","permalink":"https://github.com/ByeonSeongUk/ByeonSeongUk.github.io/categories/React/"},{"name":"Redux","slug":"React/Redux","permalink":"https://github.com/ByeonSeongUk/ByeonSeongUk.github.io/categories/React/Redux/"},{"name":"Book","slug":"Book","permalink":"https://github.com/ByeonSeongUk/ByeonSeongUk.github.io/categories/Book/"},{"name":"함께자라기","slug":"Book/함께자라기","permalink":"https://github.com/ByeonSeongUk/ByeonSeongUk.github.io/categories/Book/%ED%95%A8%EA%BB%98%EC%9E%90%EB%9D%BC%EA%B8%B0/"},{"name":"Https","slug":"Book/Https","permalink":"https://github.com/ByeonSeongUk/ByeonSeongUk.github.io/categories/Book/Https/"}],"tags":[]}